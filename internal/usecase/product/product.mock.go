// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/product/product.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/product/product.go -destination=internal/usecase/product/product.mock.go -package=product
//

// Package product is a generated GoMock package.
package product

import (
	context "context"
	reflect "reflect"

	dto "github.com/jackvonhouse/product-catalog/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockproductService is a mock of productService interface.
type MockproductService struct {
	ctrl     *gomock.Controller
	recorder *MockproductServiceMockRecorder
}

// MockproductServiceMockRecorder is the mock recorder for MockproductService.
type MockproductServiceMockRecorder struct {
	mock *MockproductService
}

// NewMockproductService creates a new mock instance.
func NewMockproductService(ctrl *gomock.Controller) *MockproductService {
	mock := &MockproductService{ctrl: ctrl}
	mock.recorder = &MockproductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproductService) EXPECT() *MockproductServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockproductService) Create(arg0 context.Context, arg1 dto.CreateProduct, arg2 dto.Category) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockproductServiceMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockproductService)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockproductService) Delete(arg0 context.Context, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockproductServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockproductService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockproductService) Get(arg0 context.Context, arg1 dto.GetProduct) ([]dto.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]dto.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockproductServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockproductService)(nil).Get), arg0, arg1)
}

// GetByCategoryId mocks base method.
func (m *MockproductService) GetByCategoryId(arg0 context.Context, arg1 dto.GetProduct, arg2 dto.Category) ([]dto.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCategoryId", arg0, arg1, arg2)
	ret0, _ := ret[0].([]dto.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCategoryId indicates an expected call of GetByCategoryId.
func (mr *MockproductServiceMockRecorder) GetByCategoryId(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCategoryId", reflect.TypeOf((*MockproductService)(nil).GetByCategoryId), arg0, arg1, arg2)
}

// GetById mocks base method.
func (m *MockproductService) GetById(arg0 context.Context, arg1 int) (dto.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(dto.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockproductServiceMockRecorder) GetById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockproductService)(nil).GetById), arg0, arg1)
}

// Update mocks base method.
func (m *MockproductService) Update(arg0 context.Context, arg1 dto.UpdateProduct, arg2 dto.Category) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockproductServiceMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockproductService)(nil).Update), arg0, arg1, arg2)
}

// MockcategoryService is a mock of categoryService interface.
type MockcategoryService struct {
	ctrl     *gomock.Controller
	recorder *MockcategoryServiceMockRecorder
}

// MockcategoryServiceMockRecorder is the mock recorder for MockcategoryService.
type MockcategoryServiceMockRecorder struct {
	mock *MockcategoryService
}

// NewMockcategoryService creates a new mock instance.
func NewMockcategoryService(ctrl *gomock.Controller) *MockcategoryService {
	mock := &MockcategoryService{ctrl: ctrl}
	mock.recorder = &MockcategoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcategoryService) EXPECT() *MockcategoryServiceMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockcategoryService) GetById(arg0 context.Context, arg1 int) (dto.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(dto.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockcategoryServiceMockRecorder) GetById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockcategoryService)(nil).GetById), arg0, arg1)
}
