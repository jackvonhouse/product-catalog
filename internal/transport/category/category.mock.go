// Code generated by MockGen. DO NOT EDIT.
// Source: internal/transport/category/category.go
//
// Generated by this command:
//
//	mockgen -source=internal/transport/category/category.go -destination=internal/transport/category/category.mock.go -package=category
//

// Package category is a generated GoMock package.
package category

import (
	context "context"
	reflect "reflect"

	dto "github.com/jackvonhouse/product-catalog/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockuseCaseCategory is a mock of useCaseCategory interface.
type MockuseCaseCategory struct {
	ctrl     *gomock.Controller
	recorder *MockuseCaseCategoryMockRecorder
}

// MockuseCaseCategoryMockRecorder is the mock recorder for MockuseCaseCategory.
type MockuseCaseCategoryMockRecorder struct {
	mock *MockuseCaseCategory
}

// NewMockuseCaseCategory creates a new mock instance.
func NewMockuseCaseCategory(ctrl *gomock.Controller) *MockuseCaseCategory {
	mock := &MockuseCaseCategory{ctrl: ctrl}
	mock.recorder = &MockuseCaseCategoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuseCaseCategory) EXPECT() *MockuseCaseCategoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockuseCaseCategory) Create(arg0 context.Context, arg1 dto.CreateCategory) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockuseCaseCategoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockuseCaseCategory)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockuseCaseCategory) Delete(arg0 context.Context, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockuseCaseCategoryMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockuseCaseCategory)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockuseCaseCategory) Get(arg0 context.Context, arg1 dto.GetCategory) ([]dto.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]dto.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockuseCaseCategoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockuseCaseCategory)(nil).Get), arg0, arg1)
}

// Update mocks base method.
func (m *MockuseCaseCategory) Update(arg0 context.Context, arg1 dto.UpdateCategory) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockuseCaseCategoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockuseCaseCategory)(nil).Update), arg0, arg1)
}

// MockuseCaseAccessToken is a mock of useCaseAccessToken interface.
type MockuseCaseAccessToken struct {
	ctrl     *gomock.Controller
	recorder *MockuseCaseAccessTokenMockRecorder
}

// MockuseCaseAccessTokenMockRecorder is the mock recorder for MockuseCaseAccessToken.
type MockuseCaseAccessTokenMockRecorder struct {
	mock *MockuseCaseAccessToken
}

// NewMockuseCaseAccessToken creates a new mock instance.
func NewMockuseCaseAccessToken(ctrl *gomock.Controller) *MockuseCaseAccessToken {
	mock := &MockuseCaseAccessToken{ctrl: ctrl}
	mock.recorder = &MockuseCaseAccessTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuseCaseAccessToken) EXPECT() *MockuseCaseAccessTokenMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockuseCaseAccessToken) Verify(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockuseCaseAccessTokenMockRecorder) Verify(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockuseCaseAccessToken)(nil).Verify), arg0, arg1)
}
